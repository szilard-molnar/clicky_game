{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Title","score","highscore","Card","alt","src","image","onClick","id","App","state","characters","clickedCards","clickEvent","clickedArcher","setState","map","character","clicked","Math","max","clickedCardsCopy","push","gameWin","gameOver","gameReset","shuffleArcher","alert","length","shuffleImages","console","log","arr","sort","a","b","floor","random","this","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"w9DAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,WCO1BC,G,MARD,SAAAH,GACZ,OAAO,yBAAKC,UAAU,UACZ,yBAAKA,UAAU,SAASD,EAAME,UAC9B,yBAAKD,UAAU,UAAf,UACUD,EAAMI,MADhB,cACkCJ,EAAMK,cCUrCC,G,MAdF,SAACN,GACV,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACf,yBACIM,IAAI,oBACJC,IAAKR,EAAMS,MACXC,QAAS,kBAAMV,EAAMU,QAAQV,EAAMW,WC6FpCC,E,2MA/FbC,MAAQ,CACNC,WAAYA,EACZV,MAAO,EACPC,UAAW,EACXU,aAAc,I,EAGlBC,WAAa,SAACL,GAGV,EAAKM,cAAcN,I,EAGvBM,cAAgB,SAACN,GACf,EAAKO,SAAS,CACZJ,WAAYA,EAAWK,KAAI,SAAAC,GACzB,GAAGA,EAAUT,KAAOA,IAA4B,IAAtBS,EAAUC,QACpC,CAEED,EAAUC,SAAU,EACpB,EAAKH,SAAS,CACZd,MAAO,EAAKS,MAAMT,MAAQ,EAC1BC,UAAWiB,KAAKC,IAAI,EAAKV,MAAMT,MAAO,EAAI,EAAKS,MAAMR,aAEvD,IAAMmB,EAAmB,EAAKX,MAAME,aACpCS,EAAiBC,KAAKL,EAAUT,IAChC,EAAKO,SAAS,CAACH,aAAcS,IAC7B,EAAKE,eAECN,EAAUT,KAAKA,IAA4B,IAAtBS,EAAUC,UAErC,EAAKM,WACL,EAAKC,kBAIX,EAAKC,iB,EAGPD,UAAY,WAEV,EAAKV,SAAS,CACZd,MAAO,EACPW,aAAc,GACdD,WAAYA,EAAWK,KAAI,SAAAC,GACzBA,EAAUC,SAAU,Q,EAK1BM,SAAW,WACTG,MAAM,YACN,EAAKF,a,EAIPF,QAAU,WACL,EAAKb,MAAME,aAAagB,SAAW,EAAKlB,MAAMC,WAAWiB,SAE1DD,MAAM,6BACN,EAAKF,c,EAITC,cAAgB,SAAClB,GACf,EAAKO,SAAS,CAACJ,WAAY,EAAKkB,cAAc,EAAKnB,MAAMC,cACzDmB,QAAQC,IAAI,mC,EAGdF,cAAgB,SAACG,GAEb,OAAOA,EAAIC,MAAK,SAACC,EAAEC,GAAH,OAAOhB,KAAKiB,MAAoB,IAAdjB,KAAKkB,UAAe,IAAI,GAAG,M,wEAGvD,IAAD,OAEP,OADAP,QAAQC,IAAIO,KAAK5B,MAAME,cAErB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOX,MAAOqC,KAAK5B,MAAMT,MAAOC,UAAWoC,KAAK5B,MAAMR,WAAtD,0BACCS,EAAWK,KACV,SAAAC,GAAS,OACP,kBAAC,EAAD,CACAT,GAAIS,EAAUT,GACd+B,IAAKtB,EAAUT,GACfF,MAAOW,EAAUX,MACjBC,QAAS,EAAKM,WACdK,QAASD,EAAUC,kB,GAvFXsB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.92d2cef4.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nconst Title = props => {\n  return <div className=\"header\">\n            <div className=\"title\">{props.children}</div>\n            <div className=\"scores\">\n              Score: {props.score} Highscore:{props.highscore}\n            </div>\n  </div>\n}\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\nconst Card = (props) => {\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n            <img \n                alt=\"cartoon character\"\n                src={props.image}\n                onClick={() => props.onClick(props.id)}\n            />\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport characters from '../src/characters.json';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Card from \"./components/Card\";\n\nclass App extends Component {\n  state = {\n    characters: characters,\n    score: 0,\n    highscore: 0,\n    clickedCards: []\n  }\n\nclickEvent = (id) => {\n  //alert(\"Archer clicked\");\n\n    this.clickedArcher(id);\n}\n\nclickedArcher = (id) => {\n  this.setState({\n    characters: characters.map(character => {\n      if(character.id === id && character.clicked === false)\n      {\n        //alert(\"this one exist \" + id);\n        character.clicked = true;\n        this.setState({\n          score: this.state.score + 1,\n          highscore: Math.max(this.state.score +1 , this.state.highscore)\n        })\n        const clickedCardsCopy = this.state.clickedCards;\n        clickedCardsCopy.push(character.id);\n        this.setState({clickedCards: clickedCardsCopy});\n        this.gameWin();\n      }\n      else if(character.id===id && character.clicked === true)\n      {\n        this.gameOver();\n        this.gameReset();\n      }\n    })\n  })\n  this.shuffleArcher();\n}\n\ngameReset = () => {\n  //alert(\"let's reset the game\");\n  this.setState({\n    score: 0,\n    clickedCards: [],\n    characters: characters.map(character => {\n      character.clicked = false;\n    })\n  });\n}\n\ngameOver = () => {\n  alert(\"you lost\");\n  this.gameReset();\n  //also need to shake wrapper\n}\n\ngameWin = () => {\n  if(this.state.clickedCards.length === this.state.characters.length)\n  {\n    alert(\"Congratulations, you win!\");\n    this.gameReset();\n  }\n}\n\nshuffleArcher = (id) => {\n  this.setState({characters: this.shuffleImages(this.state.characters)});\n  console.log(\"shuffleArcher is happening now\");\n}\n\nshuffleImages = (arr) => \n{\n    return arr.sort((a,b)=>Math.floor(Math.random()*1000)>500?1:-1);\n}\n\nrender() {\n  console.log(this.state.clickedCards);\n  return (\n    <Wrapper>\n      <Title score={this.state.score} highscore={this.state.highscore}>Memory Game with React</Title>\n      {characters.map(\n        character => (\n          <Card \n          id={character.id}\n          key={character.id}\n          image={character.image}\n          onClick={this.clickEvent}\n          clicked={character.clicked}\n          />\n        )\n      )}      \n    </Wrapper>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}